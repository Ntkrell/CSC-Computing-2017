install.packages("tidyverse")
12-4*1.645/10
x <- c(140, 138, 150, 148, 135)
y <- c(138, 136, 148, 146, 133)
t.test(x,y,paired = TRUE)
?t.test
t.test(x, y, paired = TRUE)
x
y
t.test(x-y)
diff = x-y
diff
t.test(diff)
mean(diff)
sd(diff)
t.test(x, y, paired = FALSE)
(1123+1077)/2
x <- c(2.233, -2.513, 1.204, 1.938, 2.533)
y <- c(0.929, -1.745, 1.677, 0.701, 0.128)
diff <- y/x
y/x
t.test(y/x)
t.test(exp(y/x))
t.test(y=x)
t.test(y-x)
t.test(x=y)
t.test(x-y)
t.test(x-y, alternative = 'one.sided')
t.test(x-y, alternative = 'greater')
t.test(diff, alternative = 'greater')
t.test(exp(y/x), alternative = 'greater')
t.test(x-y, alternative = 'greater')
t.test(x-y, alternative = 'greater')
x
y
x/y
exp(x/y)
rat < exp(x/y)
rat <- exp(x/y)
t.test(rat)
rat
diff <- x-y
diff
rat <- exp(diff)
rat
t.test(rat)
x
y
x-y
y-x
t.test(exp(y-x))
exp(y-x)
t.test(exp(y-x), mu=1)
t.test(exp(x-y), mu=1)
x
y
t.test(x-y)
t.test(x-y, alternative = 'greater')
t.test(x-y)
exp(-0.91)
exp(2.39)
exp(x-y)
t.test(exp(x-y), mu=1)
exp(-1.49)
t.test(x-y)
exp(-0.9111)
1-0.91
x
y
t.test(y-x)
t.test(y-x, alternative = 'greater')
t.test(y-x, alternative = 'smaller')
t.test(y-x, alternative = 'less')
t.test(y-x)
exp(2)
exp(-2.39)
exp(0.911)
0.5*(1.5^2+1.8^2)
sqrt(2.745)
sqrt(2/9)
-4/(1.656804*sqrt(2/9))
2*pt(-5.121476, df=8, lower.tail = TRUE)
qnorm(0.95)
qnorm(0.9)
1.28-1.645
0.365*4
sqrt(1.46)
1.28-1.645
0.365*4
1.46^2
qnorm(0.9)
qnorm(0.95)
qnorm(0.95)-qnorm(.09)
qnorm(0.95)-qnorm(.9)
0.363*4
qnorm(0.1)
1.28+1.645
2.925*4
11.7^2
qnorm(0.975)
pnorm(1.96-2, lower.tail = FALSE)
1.96-2
sqrt(144)
2*pt(-5.12, df=16, lower.tail = TRUE)
2*pt(-5.12, df=8, lower.tail = TRUE)
library(tokenizers)
install.packages("tokenizers")
install.packages("rvest")
library(tokenizers)
options(max.print = 25)
james <- paste0(
"The question thus becomes a verbal one\n",
"again; and our knowledge of all these early stages of thought and feeling\n",
"is in any case so conjectural and imperfect that farther discussion would\n",
"not be worth while.\n",
"\n",
"Religion, therefore, as I now ask you arbitrarily to take it, shall mean\n",
"for us _the feelings, acts, and experiences of individual men in their\n",
"solitude, so far as they apprehend themselves to stand in relation to\n",
"whatever they may consider the divine_. Since the relation may be either\n",
"moral, physical, or ritual, it is evident that out of religion in the\n",
"sense in which we take it, theologies, philosophies, and ecclesiastical\n",
"organizations may secondarily grow.\n"
)
james
tokenize_characters(james)
tokenize_words(james)
tokenize_word_stems(james)
tokenize_words(james, stopwords = stopwords())
tokenize_ngrams(james, n = 5, n_min = 2)
tokenize_words(james, stopwords = stopwords())
foo <- tokenize_words(james, stopwords = stopwords())
foo
foo[[1]]
??unnest_tokens
library(syuzhet)
install.packages("syuzhet")
library(tidyr)
library(syuzhet)
install.packages("tidytext")
library(tidytext)
?unnest_tokens
library(janeaustenr)
d <- data_frame(txt = prideprejudice)
library(dplyr)
d <- data_frame(txt = prideprejudice)
d
d %>% unnest_tokens(word, txt)
df1 <- data.frame(a = dnorm(3), b = ('foo','baa','zzz'))
?data.frame
b = ('foo','baa','zzz')
df1 <- data.frame(a = dnorm(3), b = c('foo','baa','zzz'))
df1
df2 <- data.frame(a = rnorm(3), b = c('foo','foo','zzz'))
df2
library(dplyr)
left_join(df1,df2,by='b')
df1 <- df1 %>% mutate(b = as.factor(b))
df2 <- df2 %>% mutate(b = as.factor(b))
left_join(df1,df2,by='b')
right_join(df1,df2,by='b')
setwd("~/Works/CSC-Computing-2017/R/titanic/")
dir()
library(readr)
library(dplyr)
library(Matrix)
library(stringr)
train <- as.data.frame(read_csv("./data/train.csv", col_types = 'iiiccdiicdcc'))
test <- as.data.frame(read_csv("./data/test.csv", col_types = 'iiccdiicdcc'))
head(train)
train <- read_csv("./data/train.csv", col_types = 'iiiccdiicdcc')
head(train)
library(readr)
library(dplyr)
library(Matrix)
library(stringr)
train <- as.data.frame(read_csv("./data/train.csv", col_types = 'iiiccdiicdcc'))
test <- as.data.frame(read_csv("./data/test.csv", col_types = 'iiccdiicdcc'))
head(train)
View(train)
survival <- select(train, c(Survived,PassengerId))
train <- mutate(train, Survived = NULL) %>%
mutate(is.train = 1) # Flag training data with is.train = 1
View(train)
test <- mutate(test, is.train = 0) # Flag test data with is.train = 0
allData <- rbind(train,test)
totNA <- function(x) { sum(is.na(x)) } # Finds total number of NA's in a given vector x
allData$is.train
allData[1,1]
allData[1,]
naCols <- allData %>% summarize_all(funs(totNA))# For all the columns, finds how many NAs there are
cat("Number of NA's I have found: \n")
naCols
View(allData)
titles <- character(length = nrow(allData))
for (i in 1:nrow(allData)){
temp <- str_split(allData$Name[i], "\\.")[[1]][1]
titles[i] <- str_trim(str_split(temp, ",")[[1]][2], "left")
}
cat('Number of passangers per title')
allData %>% group_by(title) %>% count()
allData <- allData %>%
mutate(title = as.factor(titles)) %>%
select(-Name)
allData %>% group_by(title) %>% count()
medAge <- allData %>%
group_by(title) %>%
summarise(medAge = median(Age, na.rm = TRUE))
head(medAge)
allData[is.na(allData$Age), ]
allData[is.na(allData$Age), ]$Age
allData[is.na(allData$Age), ]$medAge
allData[is.na(allData$Age), ]$medAge
allData <- allData %>% left_join(medAge, by="title")
allData[is.na(allData$Age), ]$medAge
allData[is.na(allData$Age), ]$Age <- allData[is.na(allData$Age), ]$medAge
mostCommonEmbarked <- allData %>%
group_by(Embarked) %>%
summarize(nEmb = n()) %>%
arrange(desc(nEmb)) %>%
slice(1)
mostCommonEmbarked <- mostCommonEmbarked$Embarked # Pick the name
fillEmbarked <- function(x){ x[is.na(x)] <- mostCommonEmbarked; x }
allData <- allData %>% mutate(Embarked = fillEmbarked(Embarked))
allData <- allData %>% mutate(has.cabin = ifelse(is.na(Cabin), 0, 1))
letterCabin <- as.data.frame(substring(allData$Cabin, 1,1), stringsAsFactors = FALSE)
colnames(letterCabin) <- c("letCabin")
allData$letCabin <- letterCabin$letCabin
allData[allData$has.cabin == 0, ]$letCabin <- "No"
allData$Cabin <- NULL
medFare <- allData %>% group_by(Pclass) %>%
summarize(medFare = median(Fare, na.rm = TRUE))
allData <- allData %>%
left_join(medFare, by="Pclass")
allData[is.na(allData$Fare), ]$Fare <- allData[is.na(allData$Fare), ]$medFare
naCols <- allData %>% summarize_all(funs(totNA))
if (any(naCols > 0)) cat("There are still NA's to fix!")
naCols
allData <- allData %>% mutate(FamSize = SibSp + Parch)
allData <- allData %>%
mutate_at(vars(Pclass,Sex,letCabin,Embarked,Pclass,has.cabin),funs(as.factor))
allData$Ticket <- NULL
train <- allData %>%
filter(is.train == 1) %>%
mutate(is.train = NULL) %>%
left_join(survival, by = "PassengerId")
test <- allData %>%
filter(is.train == 0) %>%
mutate(is.train = NULL)
standardize <- function(x){
(x-mean(x))/sd(x)
}
train <- train %>%
mutate_at(vars(Age,SibSp,Parch,Fare,medAge,medFare,FamSize),funs(standardize))
test <- test %>%
mutate_at(vars(Age,SibSp,Parch,Fare,medAge,medFare,FamSize),funs(standardize))
library(glmnet)
library(doMC)
registerDoMC() # For parallel processing, you can add number of cores
source('clean_data.R')
train <- train %>% select(-PassengerId)
testId <- test %>% select(PassengerId) # Save PassengerId for later
test <- test %>% select(-PassengerId)
trainMatrix <- model.matrix(Survived ~., data = train)[,-1]
testMatrix <- model.matrix(~., data = test)[,-1]
cat("The model Matrix turns factors into binary values:\n")
head(trainMatrix)
ytrain <- as.factor(train$Survived)
cv.logreg <- cv.glmnet(x = trainMatrix, y = ytrain,
nfolds = 10, family = "binomial", parallel = TRUE)
bestLambda <- cv.logreg$lambda.min
mod.logreg <- glmnet(x = trainMatrix, y = ytrain,
family = "binomial", lambda = bestLambda)
ypred <- predict(mod.logreg,
newx = trainMatrix,
type = "response") # Probability of survival is predicted
ypred_binary <- ifelse(ypred >= 0.5, 1, 0)
acc = sum(ypred_binary == ytrain) / length(ytrain) *100
cat("Predicted accuracy = ", acc)
